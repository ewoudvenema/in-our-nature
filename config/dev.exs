use Mix.Config

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we use it
# with brunch.io to recompile .js and .css sources.
if System.get_env("DEVPASS") do
  config :cocu, CocuWeb.Endpoint,
    load_from_system_env: true,
    url: [scheme: "https", host: "cocu-development.herokuapp.com", port: System.get_env("PORT") || 443],
    force_ssl: [rewrite_on: [:x_forwarded_proto]],
    cache_static_manifest: "priv/static/cache_manifest.json",
    secret_key_base: Map.fetch!(System.get_env(), "SECRET_KEY_BASE"),
    watchers: [node: ["node_modules/brunch/bin/brunch", "watch", "--stdin",
                    cd: Path.expand("../assets", __DIR__)]]
else
  config :cocu, CocuWeb.Endpoint,
   http: [port: System.get_env("PORT") || 4000],
   debug_errors: true,
   code_reloader: true,
   check_origin: false,
   server: true,
   watchers: [node: ["node_modules/brunch/bin/brunch", "watch", "--stdin",
                    cd: Path.expand("../assets", __DIR__)]]
end

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# command from your terminal:
#
#     openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 -subj "/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com" -keyout priv/server.key -out priv/server.pem
#
# The `http:` config above can be replaced with:
#
#     https: [port: 4000, keyfile: "priv/server.key", certfile: "priv/server.pem"],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :cocu, CocuWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r{priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$},
      ~r{priv/gettext/.*(po)$},
      ~r{lib/cocu_web/views/.*(ex)$},
      ~r{lib/cocu_web/templates/.*(eex)$}
    ]
  ]

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Configure your database
if System.get_env("DEVPASS") do
  config :cocu,
    stripe_secret_key: System.get_env("STRIPE_SECRET_KEY")

  config :stripity_stripe, secret_key: System.get_env("STRIPE_SECRET_KEY")
  config :stripity_stripe, platform_client_id: System.get_env("STRIPE_PLATFORM_CLIENT_ID")

  config :cocu, Cocu.Repo,
    adapter: Ecto.Adapters.Postgres,
    username: "cocu",
    password: System.get_env("DEVPASS"),
    database: "cocu_dev",
    hostname: "cocu-dev.cd4c4pieuyih.eu-central-1.rds.amazonaws.com",
    ssl: true,
    pool_size: String.to_integer(System.get_env("POOL_SIZE") || "10")

  config :ex_aws,
    access_key_id: System.get_env("S3_ACCESS_KEY"),
    secret_access_key: System.get_env("S3_SECRET_KEY"),
    region: "eu-central-1",
    host: "s3.eu-central-1.amazonaws.com",
    s3: [
      scheme: "https://",
      host: "s3.eu-central-1.amazonaws.com",
      region: "eu-central-1"
    ]

else
  import_config "dev.secret.exs"
end
